package com.cts.demo.model;

import java.time.LocalDate;

import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.validation.constraints.Email;
import javax.validation.constraints.Max;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotEmpty;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;

import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.format.annotation.DateTimeFormat.ISO;


@Entity
@Table(name="employees")
public class Employee {


	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private Long empId;
	
	@NotEmpty(message="firstName cannot be empty")
	@NotNull(message="firstName cannot be null")
	private String firstName;
	
	@Enumerated(EnumType.STRING)
	private Department dept;
	
	@NotEmpty(message="lastName cannot be empty")
	@NotNull(message="lastName cannot be null")
	private String lastName;
	
	@Min(value=25000,message="basic cannot be <25k")
	@Max(value=450000,message="basic cannot be >4.5L")
	private double basic;
	
	@DateTimeFormat(iso=ISO.DATE)
	private LocalDate joinDate;
	
	@Pattern(regexp="[1-9][0-9]{9}", message="Mobile number should be 10 digits")
	@NotNull(message="Mobile number cannot be ommitted")
	private String mobileNumber;
	
	@Email(message="email must be valid")
	@NotNull(message="Email cannot be ommitted")
	private String email;

	
	public Employee() {
	
	}

	public Employee(Long empId,
			@NotEmpty(message = "firstName cannot be empty") @NotNull(message = "firstName cannot be null") String firstName,
			Department dept,
			@NotEmpty(message = "lastName cannot be empty") @NotNull(message = "lastName cannot be null") String lastName,
			@Min(value = 25000, message = "basic cannot be <25k") @Max(value = 450000, message = "basic cannot be >4.5L") double basic,
			LocalDate joinDate,
			@Pattern(regexp = "[1-9][0-9]{9}", message = "Mobile number should be 10 digits") @NotNull(message = "Mobile number cannot be ommitted") String mobileNumber,
			@Email(message = "email must be valid") @NotNull(message = "Email cannot be ommitted") String email) {
		super();
		this.empId = empId;
		this.firstName = firstName;
		this.dept = dept;
		this.lastName = lastName;
		this.basic = basic;
		this.joinDate = joinDate;
		this.mobileNumber = mobileNumber;
		this.email = email;
	}



	public Long getEmpId() {
		return empId;
	}

	public void setEmpId(Long empId) {
		this.empId = empId;
	}

	public String getFirstName() {
		return firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	public String getLastName() {
		return lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	public double getBasic() {
		return basic;
	}

	public void setBasic(double basic) {
		this.basic = basic;
	}

	public LocalDate getJoinDate() {
		return joinDate;
	}

	public void setJoinDate(LocalDate joinDate) {
		this.joinDate = joinDate;
	}

	public String getMobileNumber() {
		return mobileNumber;
	}

	public void setMobileNumber(String mobileNumber) {
		this.mobileNumber = mobileNumber;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}
	
	
}
