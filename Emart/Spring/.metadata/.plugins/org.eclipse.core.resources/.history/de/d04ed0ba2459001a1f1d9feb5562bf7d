package com.cts.demo;

import static org.assertj.core.api.Assertions.assertThat;

import java.time.LocalDate;
import org.junit.Before;
import org.junit.jupiter.api.Test;
import org.junit.After;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManager;
import org.springframework.test.context.junit4.SpringRunner;

import com.cts.demo.dao.EmployeeRepository;
import com.cts.demo.model.Department;
import com.cts.demo.model.Employee;

@RunWith(SpringRunner.class) // a bridge b/w Spring Boot test features and junit
@DataJpaTest //configuring H2, an in-memory database, setting hibernate, spring data, and the data source
public class EmployeeDaoUnitTest {

	private Employee emps[];
	
	@Autowired
	private TestEntityManager entityManager;
	
	@Autowired
	private EmployeeRepository employeeRepository;

	public EmployeeDaoUnitTest() {
		emps=new Employee[] {
				new Employee("Amitabh",Department.DEVELOPMENT,"Bachhan",36000,LocalDate.now(),"9876543218","amitabh@gmail.com")
		};
	}
	
	@Before
	public void beforeEachTest() {
		for(Employee e:emps) {
			entityManager.persist(e);
		}
		entityManager.flush();
	}
	
	@After
	public void afterEachTest() {
		for(Employee e:emps) {
			entityManager.remove(e);
		}
		entityManager.flush();
	}
	
	@Test
	public void whenFindByMobileNumber_thenReturnEmployee() {
		Employee e=employeeRepository.findByMobileNumber(emps[0].getMobileNumber());
		assertThat(e).isEqualTo(emps[0]);
	}
	
	@Test
	public void whenFindByMobileNumber_withNonExistingMobileNumber_thenReturnNull() {
		Employee e=employeeRepository.findByMobileNumber("1234567790");
		assertThat(e).isNull();
	}
}
